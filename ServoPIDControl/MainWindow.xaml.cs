using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using InteractiveDataDisplay.WPF;
using NLog;
using NLog.Config;
using NLog.Targets.Wrappers;
using ServoPIDControl.Annotations;
using ServoPIDControl.Helper;
using ServoPIDControl.Model;

namespace ServoPIDControl
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    [UsedImplicitly]
    public partial class MainWindow
    {
        private static readonly Logger Log = LogManager.GetCurrentClassLogger();
        private readonly ArduinoCom _arduinoCom = new ArduinoCom();

        public MainWindow()
        {
            InitializeComponent();

            Loaded += OnLoaded;
            Unloaded += OnUnloaded;

            Model.PropertyChanged += ModelOnPropertyChanged;
            ServosDataGrid.AutoGeneratedColumns += ServosDataGridOnAutoGeneratedColumns;
        }

        private void ModelOnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case nameof(Model.ComPorts) when Model.ConnectedPort == null && Model.ComPorts != null:
                    Model.ConnectedPort = Model.ComPorts.FirstOrDefault();
                    break;

                case nameof(Model.CurrentGraphServo):
                    ChartGrid.Children.Clear();
                    if (Model.CurrentGraphServo == null)
                        break;

                    // add each series with color based on index
                    foreach (var (series, i) in Model.CurrentGraphServo.AllTimeSeries.Select((x, i) => (x, i)))
                    {
                        var lg = new LineGraph
                        {
                            Stroke = new SolidColorBrush(Color.FromArgb(255,
                                (byte) ((i & 1) != 0 ? 255 : 100),
                                (byte) ((i & 2) != 0 ? 200 : 50),
                                (byte) (i % 4 == 0 ? 255 : 50))),
                            Description = series.Name,
                            ShowMarkers = false,
                            StrokeThickness = 2,
                        };
                        ChartGrid.Children.Add(lg);
                        lg.Plot(series.X, series.Y);
                    }

                    Chart.XLabelProvider = new LabelProvider();
                    break;
            }
        }

        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            ConnectNLogToUi();

            _arduinoCom.Model = Model;

            if (Model.ConnectedPort == null && Model.ComPorts != null)
                Model.ConnectedPort = Model.ComPorts.FirstOrDefault();

            Log.Info("Ready!\r\n");
        }

        private void ConnectNLogToUi()
        {
            var wpfTarget = new WpfRichTextBoxTarget
            {
                ControlName = LogBox.Name,
                FormName = GetType().Name,
                MaxLines = 500,
                UseDefaultRowColoringRules = true,
                AutoScroll = true,
                // ReSharper disable StringLiteralTypo
                Layout = "${processtime} [${level:uppercase=true}] " +
                         "${logger:shortName=true}: ${message}" +
                         "${exception:innerFormat=tostring:maxInnerExceptionLevel=10:separator=,:format=tostring}",
                // ReSharper restore StringLiteralTypo
            };

            var asyncWrapper = new AsyncTargetWrapper {Name = "RichTextAsync", WrappedTarget = wpfTarget};
            LogManager.Configuration.AddTarget(asyncWrapper.Name, asyncWrapper);
            LogManager.Configuration.LoggingRules.Insert(0, new LoggingRule("*", LogLevel.Info, asyncWrapper));
            LogManager.ReconfigExistingLoggers();
        }

        private void ServosDataGridOnAutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (var name in new[]
            {
                nameof(ServoPidModel.Times), nameof(ServoPidModel.SetPoints),
                nameof(ServoPidModel.Inputs), nameof(ServoPidModel.Outputs),
                nameof(ServoPidModel.AllTimeSeries)
            })
            {
                var c = ServosDataGrid.Columns.First(c2 => (string) c2.Header == name);
                ServosDataGrid.Columns.Remove(c);
            }
        }

        private void OnUnloaded(object sender, RoutedEventArgs e)
        {
            _arduinoCom.Model = null;
        }

        private void ServosDataGrid_OnSelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            var servo = (ServoPidModel) ServosDataGrid.SelectedCells.FirstOrDefault().Item;
            if (servo != null)
                Model.CurrentGraphServo = servo;
        }
    }
}